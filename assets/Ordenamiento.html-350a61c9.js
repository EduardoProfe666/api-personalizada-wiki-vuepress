import{_ as o}from"./banner-85030e21.js";import{_ as c,r as l,o as i,c as u,a as n,d as a,w as t,b as p,e}from"./app-7e379709.js";const r={},k=e('<p><img src="'+o+'" alt="a"></p><h1 id="ordenamiento" tabindex="-1"><a class="header-anchor" href="#ordenamiento" aria-hidden="true">#</a> Ordenamiento</h1><p>Clase que contiene implementaciones de algunos de los métodos de ordenamiento más usados.</p><p>Los algoritmos necesitan de una lista de elementos (en el caso específico del <code>bucketSort</code> también necesita de la cantidad de cubos a emplear). Los elementos deben implementar la interfaz Comparable para que el algoritmo funcione.</p><div class="custom-container tip"><p class="custom-container-title">Nota:</p><p>En la prueba visual de la api, existe una prueba de la eficiencia de los algoritmos de ordenamiento en la sección de <code>Ordenamiento</code>.</p></div><p><strong>Índice de contenido</strong>:</p>',6),d={class:"table-of-contents"},m=e(`<h2 id="algoritmos-implementados" tabindex="-1"><a class="header-anchor" href="#algoritmos-implementados" aria-hidden="true">#</a> Algoritmos implementados</h2><p>Los algoritmos de búsqueda disponibles son:</p><ul><li><a href="#bubble-sort">Bubble Sort</a></li><li><a href="#insertion-sort">Insertion Sort</a></li><li><a href="#bucket-sort">Bucket Sort</a></li><li><a href="#selection-sort">Selection Sort</a></li><li><a href="#merge-sort">Merge Sort</a></li><li><a href="#quick-sort">Quick Sort</a></li><li><a href="#heap-sort">Heap Sort</a></li><li><a href="#radix-sort">Radix Sort</a></li><li><a href="#shell-sort">Shell Sort</a></li><li><a href="#cocktail-sort">Cocktail Sort</a></li><li><a href="#comb-sort">Comb Sort</a></li><li><a href="#gnome-sort">Gnome Sort</a></li><li><a href="#tim-sort-nativo">Tim Sort Nativo</a></li><li><a href="#tim-sort">Tim Sort</a></li><li><a href="#odd-even-sort">Odd Even Sort</a></li></ul><h3 id="bubble-sort" tabindex="-1"><a class="header-anchor" href="#bubble-sort" aria-hidden="true">#</a> Bubble Sort</h3><ul><li><strong>Arquetipo:</strong> <code>bubbleSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento de burbuja. Es un método simple de ordenamiento que funciona intercambiando repetidamente los elementos adyacentes de una lista si están en el orden incorrecto. El proceso se repite hasta que la lista esté completamente ordenada.</li><li><strong>Particularidades:</strong> Es fácil de implementar y funciona bien para listas pequeñas. Sin embargo, su eficiencia es baja, ya que requiere un número cuadrático de comparaciones e intercambios en el peor caso.</li><li><strong>Funcionamiento:</strong> El proceso comienza comparando el primer elemento de la lista con el segundo elemento. Si el primer elemento es mayor que el segundo, se intercambian. Luego, se compara el segundo elemento con el tercer elemento y se intercambian si es necesario. Este proceso continúa hasta que se llega al último par de elementos de la lista. Si el último par de elementos se intercambia, se repite el proceso desde el principio hasta el penúltimo par de elementos. Este proceso se repite hasta que no se necesiten más intercambios. En cada iteración del algoritmo, el elemento más grande de la lista se &quot;burbujea&quot; hasta el final de la lista, como si fuera una burbuja subiendo a la superficie del agua.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="insertion-sort" tabindex="-1"><a class="header-anchor" href="#insertion-sort" aria-hidden="true">#</a> Insertion Sort</h3><ul><li><strong>Arquetipo:</strong> <code>insertionSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento por inserción. Es un método sencillo de ordenamiento que funciona construyendo una lista ordenada a partir de una lista desordenada. El proceso comienza con el primer elemento de la lista desordenada y se inserta en la posición correcta en la lista ordenada. Luego, se toma el siguiente elemento de la lista desordenada y se inserta en su posición correcta en la lista ordenada, y así sucesivamente hasta que se insertan todos los elementos de la lista desordenada.</li><li><strong>Particularidades:</strong> Es eficiente para listas pequeñas o listas que ya están ordenadas o casi ordenadas. El algoritmo es estable, lo que significa que la posición relativa de los elementos con valores iguales se mantiene después de la ordenación.</li><li><strong>Funcionamiento:</strong> El proceso comienza con el primer elemento de la lista desordenada y se inserta en la posición correcta en la lista ordenada. Luego, se toma el siguiente elemento de la lista desordenada y se inserta en su posición correcta en la lista ordenada, y así sucesivamente hasta que se insertan todos los elementos de la lista desordenada. El proceso de inserción implica comparar el elemento actual con los elementos de la lista ordenada y desplazar los elementos mayores hacia la derecha para hacer espacio para el elemento actual. Una vez que se encuentra la posición correcta para el elemento actual, se lo inserta en la lista ordenada.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">insertionSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="bucket-sort" tabindex="-1"><a class="header-anchor" href="#bucket-sort" aria-hidden="true">#</a> Bucket Sort</h3><ul><li><strong>Arquetipo:</strong> <code>bucketSort(List, int)</code></li><li><strong>Parámetros:</strong> Lista de elementos, Cantidad de Cubos a emplear (Debe ser mayor que 0 o el algoritmo no funcionará).</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento de cubos. Es un método de ordenamiento que se utiliza para ordenar una lista de números enteros en un rango específico.</li><li><strong>Particularidades:</strong> Este algoritmo es particularmente eficiente cuando se trabaja con un rango de enteros pequeño en comparación con la cantidad de elementos en la lista, ya que el número de cubos necesarios es proporcional al rango de enteros y no a la cantidad de elementos en la lista. Sin embargo, su eficiencia disminuye cuando el rango de enteros es grande. Además, el algoritmo requiere espacio adicional para almacenar los cubos, lo que puede ser un problema en sistemas con recursos limitados.</li><li><strong>Funcionamiento:</strong> El proceso comienza con la creación de un arreglo de cubos, donde cada cubo representa un rango específico de enteros. Los elementos de la lista se colocan en los cubos correspondientes según su valor. Luego, los elementos de cada cubo se ordenan, ya sea mediante el uso de otro algoritmo de ordenamiento o mediante la recursión del mismo algoritmo de ordenamiento de cubos. Finalmente, los elementos se toman de cada cubo en orden y se colocan en la lista de salida. La lista resultante estará ordenada en orden creciente.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">bucketSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="selection-sort" tabindex="-1"><a class="header-anchor" href="#selection-sort" aria-hidden="true">#</a> Selection Sort</h3><ul><li><strong>Arquetipo:</strong> <code>selectionSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento por selección. Es un método simple de ordenamiento que funciona encontrando repetidamente el elemento mínimo de una lista desordenada y colocándolo al principio de la lista. El proceso se repite hasta que la lista esté completamente ordenada.</li><li><strong>Particularidades:</strong> Es fácil de implementar y funciona bien para listas pequeñas. Sin embargo, su eficiencia es baja, ya que requiere un número cuadrático de comparaciones y movimientos de elementos en el peor caso.</li><li><strong>Funcionamiento:</strong> El proceso comienza encontrando el elemento mínimo de la lista desordenada y colocándolo en la primera posición de la lista. Luego, se encuentra el siguiente elemento mínimo en la sublista restante y se coloca en la segunda posición de la lista. Este proceso continúa hasta que se han encontrado todos los elementos mínimos de la lista y se han colocado en la posición correcta. En cada iteración, el algoritmo busca el elemento mínimo de la sublista restante y lo coloca en la posición correcta en la lista ordenada. De esta manera, la lista se va construyendo de manera incremental, desde el principio hasta el final.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">selectionSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="merge-sort" tabindex="-1"><a class="header-anchor" href="#merge-sort" aria-hidden="true">#</a> Merge Sort</h3><ul><li><strong>Arquetipo:</strong> <code>mergeSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento de fusión. Es un método de ordenamiento eficiente que funciona dividiendo repetidamente la lista en mitades más pequeñas y ordenándolas, para luego fusionarlas en una lista ordenada. El algoritmo de ordenamiento por fusión también es utilizado en la implementación de otros algoritmos de ordenamiento, como el algoritmo de ordenamiento Timsort.</li><li><strong>Particularidades:</strong> Es muy eficiente para grandes listas desordenadas, ya que su complejidad temporal es de O(n log n), donde n es el número de elementos en la lista. Además, es un algoritmo estable, lo que significa que la posición relativa de los elementos con valores iguales se mantiene después de la ordenación.</li><li><strong>Funcionamiento:</strong> El proceso comienza dividiendo la lista en dos mitades iguales. Cada mitad se ordena recursivamente utilizando el mismo algoritmo de ordenamiento por fusión. El proceso de ordenamiento recursivo se repite hasta que las sublistas son lo suficientemente pequeñas como para ser ordenadas de manera trivial (por ejemplo, una sublista de un solo elemento ya está ordenada). Luego, se fusionan las sublistas ordenadas en una lista ordenada. El proceso de fusión implica comparar los elementos de ambas sublistas y colocarlos en la lista resultante en orden ascendente. Este proceso se repite hasta que se han fusionado todas las sublistas y se obtiene una lista ordenada completa.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="quick-sort" tabindex="-1"><a class="header-anchor" href="#quick-sort" aria-hidden="true">#</a> Quick Sort</h3><ul><li><strong>Arquetipo:</strong> <code>quickSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento rapido. Es un método de ordenamiento eficiente que funciona dividiendo repetidamente la lista en dos sublistas más pequeñas, una con elementos menores que un pivote elegido y otra con elementos mayores, y luego ordenándolas recursivamente.</li><li><strong>Particularidades:</strong> El algoritmo de ordenamiento rápido es muy eficiente para grandes listas desordenadas, ya que su complejidad temporal promedio es de O(n log n), donde n es el número de elementos en la lista. Sin embargo, su complejidad en el peor caso puede ser de O(n^2), cuando el pivote elegido no es un buen representante del conjunto de datos o cuando la lista está casi ordenada. Para mitigar este problema, se pueden utilizar diversas técnicas, como la elección de pivotes aleatorios y la selección de pivotes medianos de tres elementos.</li><li><strong>Funcionamiento:</strong> El proceso comienza seleccionando un elemento de la lista como pivote. Luego, se reorganiza la lista de manera que los elementos menores que el pivote estén a su izquierda y los elementos mayores estén a su derecha. Este proceso se conoce como partición. Después de la partición, el pivote ocupa su posición final en la lista ordenada. Luego, se ordenan recursivamente las sublistas a la izquierda y a la derecha del pivote utilizando el mismo algoritmo de ordenamiento rápido. El proceso de ordenamiento recursivo se repite hasta que las sublistas sean lo suficientemente pequeñas como para ser ordenadas de manera trivial.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">quickSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="heap-sort" tabindex="-1"><a class="header-anchor" href="#heap-sort" aria-hidden="true">#</a> Heap Sort</h3><ul><li><strong>Arquetipo:</strong> <code>heapSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento de montículo. Es un método de ordenamiento que utiliza la estructura de datos de montículo (heap) para ordenar una lista de elementos.</li><li><strong>Particularidades:</strong> El algoritmo de ordenamiento de montículo es eficiente para listas grandes, ya que su complejidad temporal es de O(n log n), donde n es el número de elementos en la lista. Sin embargo, su complejidad espacial es de O(n), porque se requiere espacio adicional para almacenar el montículo. Además, es un algoritmo in situ, es decir, que ordena la lista original sin necesidad de crear una copia adicional.</li><li><strong>Funcionamiento:</strong> El proceso comienza construyendo un montículo a partir de la lista desordenada. Un montículo es una estructura de datos en forma de árbol en la que cada nodo tiene un valor asociado y el valor de cada nodo es mayor o menor que el valor de sus hijos, dependiendo del tipo de montículo que se esté utilizando. En el caso del algoritmo de ordenamiento de montículo, se utiliza un max heap, donde el valor de cada nodo es mayor o igual que el valor de sus hijos. Una vez construido el montículo, el elemento máximo (ubicado en la raíz del montículo) se intercambia con el último elemento de la lista desordenada. Luego, se reduce el tamaño del montículo en uno y se ajusta el montículo para que vuelva a ser un max heap. Este proceso se repite hasta que se hayan intercambiado todos los elementos del montículo y la lista esté completamente ordenada.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">heapSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="radix-sort" tabindex="-1"><a class="header-anchor" href="#radix-sort" aria-hidden="true">#</a> Radix Sort</h3><ul><li><strong>Arquetipo:</strong> <code>radixSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento por base. Funciona ordenando los elementos de una lista según sus dígitos, de manera similar al algoritmo de ordenamiento por selección, pero en este caso se compara cada dígito en lugar de cada elemento completo.</li><li><strong>Particularidades:</strong> Es eficiente para listas grandes y para listas con un rango limitado de valores, ya que su complejidad temporal es lineal con respecto al número de elementos y al rango de valores (O(n k)), donde n es el número de elementos en la lista y k es el rango de valores. Sin embargo, su complejidad espacial puede ser alta, porque requiere espacio adicional para almacenar los grupos intermedios de elementos.</li><li><strong>Funcionamiento:</strong> El proceso comienza por separar los elementos de la lista en grupos según el dígito menos significativo. Luego, se ordenan los elementos dentro de cada grupo utilizando un algoritmo de ordenamiento estable (por ejemplo, el ordenamiento por inserción). Este proceso se repite para los dígitos más significativos, hasta que se hayan ordenado todos los dígitos de los elementos. Es importante destacar que el algoritmo de ordenamiento por base requiere que todos los elementos de la lista tengan la misma cantidad de dígitos. Si algunos elementos tienen menos dígitos que otros, se deben agregar ceros a la izquierda para igualar la cantidad de dígitos.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">radixSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="shell-sort" tabindex="-1"><a class="header-anchor" href="#shell-sort" aria-hidden="true">#</a> Shell Sort</h3><ul><li><strong>Arquetipo:</strong> <code>shellSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento de Shell-Metzner. Es un método de ordenamiento que se basa en el algoritmo de ordenamiento por inserción, pero que utiliza una estrategia de incrementos variables para mejorar su eficiencia.</li><li><strong>Particularidades:</strong> No tiene una complejidad temporal fácil de definir, ya que depende de la secuencia de incrementos utilizada para separar los grupos de elementos. Sin embargo, se ha demostrado que el algoritmo de ordenamiento Shell tiene un rendimiento mejor que el algoritmo de ordenamiento por inserción para listas de tamaño mediano a grande.</li><li><strong>Funcionamiento:</strong> El proceso comienza dividiendo la lista en grupos de elementos separados por una cantidad fija de posiciones. Luego, se ordenan los grupos utilizando el algoritmo de ordenamiento por inserción. Este proceso se repite varias veces, cada vez con una cantidad de posiciones menor para separar los grupos. En cada iteración, se reduce la cantidad de posiciones utilizadas para separar los grupos, hasta llegar a la cantidad mínima de posiciones. La idea detrás del algoritmo de ordenamiento Shell es que al ordenar grupos de elementos separados por distancias más grandes, se pueden mover elementos más grandes a sus posiciones finales con menos operaciones de intercambio en comparación con el algoritmo de ordenamiento por inserción estándar. Luego, al ordenar grupos de elementos separados por distancias más pequeñas, se asegura que la lista está casi ordenada, lo que reduce el número de operaciones de intercambio necesarias para ordenar completamente la lista.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">shellSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="cocktail-sort" tabindex="-1"><a class="header-anchor" href="#cocktail-sort" aria-hidden="true">#</a> Cocktail Sort</h3><ul><li><strong>Arquetipo:</strong> <code>cocktailSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento de coctel, también conocido como ordenamiento por sacudida u ordenamiento de burbuja bidireccional. Es un método de ordenamiento que es similar al algoritmo de ordenamiento de burbuja, pero que funciona en ambas direcciones.</li><li><strong>Particularidades:</strong> El algoritmo de ordenamiento por cóctel tiene una complejidad temporal de O(n^2) en el peor caso, donde n es el número de elementos en la lista. Debido a su baja eficiencia, este algoritmo se utiliza principalmente para fines educativos y para ordenar listas pequeñas.</li><li><strong>Funcionamiento:</strong> El proceso comienza comparando el primer y el segundo elemento de la lista. Si el primer elemento es mayor que el segundo, se intercambian. Luego, se compara el segundo y el tercer elemento, y así sucesivamente hasta llegar al final de la lista. Este proceso se repite hasta que no se realice ningún intercambio en una pasada completa de la lista. Una vez que se ha completado una pasada hacia adelante, se comienza una pasada hacia atrás, comenzando por el último y el penúltimo elemento. Si el último elemento es mayor que el penúltimo, se intercambian. Luego, se compara el penúltimo y el antepenúltimo elemento, y así sucesivamente hasta llegar al principio de la lista. Este proceso se repite hasta que no se realice ningún intercambio en una pasada completa de la lista. El algoritmo de ordenamiento por coctel se repite alternando pasadas hacia adelante y hacia atrás hasta que la lista esté completamente ordenada. Una ventaja de este algoritmo es que puede detectar cuando la lista ya está ordenada y detenerse antes de completar todas las pasadas.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">cocktailSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="comb-sort" tabindex="-1"><a class="header-anchor" href="#comb-sort" aria-hidden="true">#</a> Comb Sort</h3><ul><li><strong>Arquetipo:</strong> <code>combSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento de peine mejorado. Es un método de ordenamiento que es similar al algoritmo de ordenamiento por peine, pero que utiliza una estrategia de &quot;peine&quot; mejorada para mejorar su eficiencia.</li><li><strong>Particularidades:</strong> El algoritmo de ordenamiento de peine tiene una complejidad temporal promedio de O(n log n), donde n es el número de elementos en la lista. Sin embargo, su complejidad temporal en el peor caso puede ser O(n^2), por lo que se recomienda utilizar otros algoritmos de ordenamiento para listas grandes.</li><li><strong>Funcionamiento:</strong> El proceso comienza comparando los primeros dos elementos de la lista y, si el primer elemento es mayor que el segundo, se intercambian. Luego, se compara el segundo y el tercer elemento, y así sucesivamente hasta el final de la lista. Este proceso se repite hasta que se llega al final de la lista. En este punto, se reduce la cantidad de elementos que se comparan en cada pasada utilizando un factor de reducción llamado &quot;factor de peine&quot;. El factor de peine es un número entre 1 y el tamaño de la lista, y se utiliza para separar los elementos que se compararán en cada pasada. Sin embargo, a diferencia del algoritmo de ordenamiento por peine, el factor de peine se reduce mediante una función de reducción que es más efectiva en la reducción del factor de peine. La función de reducción suele ser el resultado de la división del factor de peine por un valor fijo, llamado &quot;factor de reducción&quot;. El algoritmo de ordenamiento comb se repite varias veces, reduciendo el factor de peine en cada iteración, utilizando la función de reducción. En cada iteración, los elementos que se comparan están más cerca entre sí, lo que permite una comparación más efectiva de los elementos y una reducción en el número de intercambios de elementos.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">combSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="gnome-sort" tabindex="-1"><a class="header-anchor" href="#gnome-sort" aria-hidden="true">#</a> Gnome Sort</h3><ul><li><strong>Arquetipo:</strong> <code>gnomeSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento de gnome, también conocido como ordenamiento de la planta de jardin u ordenamiento de Stupid. Es un método de ordenamiento que es similar al algoritmo de ordenamiento por inserción, pero que utiliza una estrategia diferente para comparar y mover elementos en la lista.</li><li><strong>Particularidades:</strong> El algoritmo de ordenamiento de gnome tiene una complejidad temporal promedio de O(n^2), donde n es el número de elementos en la lista. Debido a su baja eficiencia, este algoritmo se utiliza principalmente para fines educativos y para ordenar listas pequeñas.</li><li><strong>Funcionamiento:</strong> El proceso comienza comparando los primeros dos elementos de la lista y, si el primer elemento es mayor que el segundo, se intercambian. Luego, se compara el segundo y el tercer elemento, y así sucesivamente hasta el final de la lista. Si se encuentra que un elemento está en la posición incorrecta, se intercambia con el elemento anterior y se retrocede una posición en la lista. Este proceso se repite hasta que se llega al principio de la lista. El algoritmo de ordenamiento de gnome se repite varias veces, retrocediendo en la lista para mover los elementos a sus posiciones correctas. A diferencia del algoritmo de ordenamiento por inserción, no se utiliza una estrategia de comparación y movimiento de elementos en una sola dirección, sino que se retrocede en la lista para mover los elementos a su posición correcta.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">gnomeSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="tim-sort-nativo" tabindex="-1"><a class="header-anchor" href="#tim-sort-nativo" aria-hidden="true">#</a> Tim Sort Nativo</h3><ul><li><strong>Arquetipo:</strong> <code>timSortNativo(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que utiliza el ordenamiento Tim nativo de <code>Collections</code>.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">timSortNativo</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="tim-sort" tabindex="-1"><a class="header-anchor" href="#tim-sort" aria-hidden="true">#</a> Tim Sort</h3><ul><li><strong>Arquetipo:</strong> <code>timSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento de Tim u ordenamiento por mezcla natural. Es un método de ordenamiento que combina las técnicas de los algoritmos de ordenamiento por inserción y por mezcla.</li><li><strong>Particularidades:</strong> El algoritmo de ordenamiento Tim es especialmente eficiente para listas que contienen sublistas ordenadas, ya que puede detectar y aprovechar estas sublistas para reducir el número de operaciones de comparación y mezcla necesarias. Además, el uso del algoritmo de ordenamiento por inserción para ordenar los trozos de la lista también contribuye a mejorar su eficiencia para listas pequeñas.</li><li><strong>Funcionamiento:</strong> El proceso comienza dividiendo la lista en &quot;trozos&quot; ordenados de manera ascendente, utilizando el algoritmo de ordenamiento por inserción para ordenar cada trozo. Luego, se mezclan los trozos en sublistas ordenadas utilizando el algoritmo de ordenamiento por mezcla. El algoritmo de ordenamiento Tim se repite varias veces, dividiendo y ordenando los trozos de la lista hasta que se haya completado una pasada completa de la lista sin necesidad de realizar ninguna mezcla. En este punto, la lista está completamente ordenada.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">timSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="odd-even-sort" tabindex="-1"><a class="header-anchor" href="#odd-even-sort" aria-hidden="true">#</a> Odd Even Sort</h3><ul><li><strong>Arquetipo:</strong> <code>oddEvenSort(List)</code></li><li><strong>Parámetros:</strong> Lista de elementos.</li><li><strong>Descripción:</strong> Algoritmo de ordenamiento que modela el ordenamiento de pares e impares. Es un método de ordenamiento que utiliza dos fases para ordenar una lista de números enteros. En la primera fase, se ordenan los elementos pares, y en la segunda fase, se ordenan los elementos impares.</li><li><strong>Particularidades:</strong> Este algoritmo es especialmente útil para listas grandes con valores repetidos, ya que puede reducir el número de intercambios necesarios para ordenar la lista. El algoritmo de ordenamiento de pares e impares tiene una complejidad temporal promedio de O(n^2), donde n es el número de elementos en la lista. Debido a su baja eficiencia, este algoritmo se utiliza principalmente para fines educativos y para ordenar listas pequeñas.</li><li><strong>Funcionamiento:</strong> El proceso comienza comparando los elementos en posiciones pares y sus vecinos impares. Si el elemento en la posición par es mayor que su vecino impar, se intercambian. Luego, se repite el proceso para todas las posiciones pares en la lista. En la segunda fase, se realiza el mismo proceso, pero esta vez se comparan las posiciones impares y sus vecinos pares. Si el elemento en la posición impar es mayor que su vecino par, se intercambian. Luego, se repite el proceso para todas las posiciones impares en la lista. El algoritmo de ordenamiento de pares e impares se repite varias veces hasta que la lista esté completamente ordenada.</li><li><blockquote><p><strong>Ejemplo de uso:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista antes de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">oddEvenSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lista después de ordenar: &quot;</span><span class="token operator">+</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h2 id="pruebas-de-algoritmos" tabindex="-1"><a class="header-anchor" href="#pruebas-de-algoritmos" aria-hidden="true">#</a> Pruebas de algoritmos</h2><p>Clase que permite probar en consola la eficiencia de los algoritmos de ordenamiento implementados. Los resultados son <strong>superficiales</strong>, es decir, no significan que un algoritmo sea mejor que otro. Cada algoritmo es eficiente en ciertos escenarios.</p><p><strong>Índice de contenido</strong>:</p><ul><li><a href="#c%C3%B3digo-fuente-pruebas">Código Fuente</a></li><li><a href="#clases-utilizadas-pruebas-importaciones">Clases Utilizadas (Importaciones)</a></li></ul><h3 id="codigo-fuente-pruebas" tabindex="-1"><a class="header-anchor" href="#codigo-fuente-pruebas" aria-hidden="true">#</a> Código Fuente Pruebas</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PruebaAlgoritmoOrdenamiento</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">PruebaAlgoritmoOrdenamiento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> listaN <span class="token operator">=</span> <span class="token function">randomN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">algoritmos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token punctuation">}</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token class-name">String</span> nombreAlgoritmo<span class="token punctuation">,</span> <span class="token keyword">double</span> milisegundos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>milisegundos<span class="token punctuation">)</span><span class="token punctuation">;</span>
		b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_DOWN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Tiempo de ejecucion del algoritmo de ordenamiento &quot;</span><span class="token operator">+</span>nombreAlgoritmo<span class="token operator">+</span><span class="token string">&quot;: &quot;</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;ms\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">algoritmos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">long</span> tiempoInicio<span class="token punctuation">;</span>
		<span class="token keyword">long</span> tiempoFin<span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//BubbleSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;BubbleSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//InsertionSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">insertionSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;InsertionSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//BucketSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">bucketSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;BucketSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//SelectionSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">selectionSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;SelectionSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//MergeSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;MergeSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//QuickSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">quickSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;QuickSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//HeapSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">heapSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;HeapSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//RadixSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">insertionSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;RadixSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//ShellSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">shellSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;ShellSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//CocktailSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">cocktailSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;CocktailSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//CombSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">combSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;CombSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//GnomeSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">gnomeSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;GnomeSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//TimSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">timSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;TimSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//TimSort Nativo</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">timSortNativo</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;TimSort Nativo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		lista <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//OddEvenSort</span>
		tiempoInicio <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Ordenamiento</span><span class="token punctuation">.</span><span class="token function">oddEvenSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tiempoFin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">imprimirResultado</span><span class="token punctuation">(</span><span class="token string">&quot;OddEvenSort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tiempoFin<span class="token operator">-</span>tiempoInicio<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">randomN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
			l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> l<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clases-utilizadas-pruebas-importaciones" tabindex="-1"><a class="header-anchor" href="#clases-utilizadas-pruebas-importaciones" aria-hidden="true">#</a> Clases Utilizadas Pruebas (Importaciones)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">RoundingMode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="codigo-fuente" tabindex="-1"><a class="header-anchor" href="#codigo-fuente" aria-hidden="true">#</a> Código Fuente</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Ordenamiento</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">Ordenamiento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_MERGE</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> size <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">T</span> key <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                lista<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            lista<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">,</span> <span class="token keyword">int</span> numeroBuckets<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>lista <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> lista<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> numeroBuckets<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>

		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>numeroBuckets<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//Determinar el valor maximo y minimo</span>
		<span class="token class-name">T</span> maxVal <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">T</span> minVal <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//Determinar el ancho de cada cubeta</span>
		<span class="token keyword">double</span> rango <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>maxVal<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>minVal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> numeroBuckets<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>rango<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
			rango<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token comment">//Crear buckets</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numeroBuckets<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			buckets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//Distribuir elementos por los buckets</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">T</span> val <span class="token operator">:</span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">int</span> bucketIndice <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>minVal<span class="token punctuation">)</span> <span class="token operator">/</span> rango<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>bucketIndice<span class="token operator">&gt;=</span>numeroBuckets<span class="token punctuation">)</span>
				bucketIndice <span class="token operator">=</span> numeroBuckets<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			buckets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bucketIndice<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//Ordenar buckets</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> bucket <span class="token operator">:</span> buckets<span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//Concatenar los buckets en orden en la lista original</span>
		<span class="token keyword">int</span> indice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> bucket <span class="token operator">:</span> buckets<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">T</span> val <span class="token operator">:</span> bucket<span class="token punctuation">)</span><span class="token punctuation">{</span>
				lista<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>indice<span class="token operator">++</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">T</span> temp <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lista<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">,</span> lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lista<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> midIndex <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> leftArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> midIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> rightArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>midIndex<span class="token punctuation">,</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">mergeSort</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">mergeSort</span><span class="token punctuation">(</span>rightArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">merge</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> leftArr<span class="token punctuation">,</span> rightArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">heapify</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">heapify</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lista <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> lista<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Encontramos el valor máximo en el arreglo</span>
        <span class="token class-name">T</span> maxVal <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> val <span class="token operator">:</span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                maxVal <span class="token operator">=</span> val<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Obtenemos el número de dígitos del valor máximo</span>
        <span class="token keyword">int</span> numDigits <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Ordenamos los elementos por dígitos</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numDigits<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">countingSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Definimos la secuencia de distancias</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gaps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">701</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Aplicamos Insertion Sort con cada distancia</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">:</span> gaps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">T</span> temp <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> j<span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> gap <span class="token operator">&amp;&amp;</span> lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">-</span> gap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    lista<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">-</span> gap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                lista<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">cocktailSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token comment">// Recorremos el arreglo hacia adelante y hacia atrás</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>swapped<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

            <span class="token comment">// Recorrido hacia adelante</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>swapped<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

            <span class="token comment">// Recorrido hacia atrás</span>
            end<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> start<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            start<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">combSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token comment">// Reducimos la distancia entre pares de elementos</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span> swapped<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            gap <span class="token operator">=</span> <span class="token function">getNextGap</span><span class="token punctuation">(</span>gap<span class="token punctuation">)</span><span class="token punctuation">;</span>

            swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> gap<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> gap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> gap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">gnomeSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">timSortNativo</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>lista<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">oddEvenSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sorted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

            <span class="token comment">// Ordenamos los elementos en índices impares</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Ordenamos los elementos en índices pares</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>lista<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">timSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> lista<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Tamaño mínimo de los bloques a ordenar</span>
        <span class="token keyword">int</span> minRun <span class="token operator">=</span> <span class="token function">minRunLength</span><span class="token punctuation">(</span><span class="token constant">MIN_MERGE</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Dividimos la lista en bloques y los ordenamos</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> minRun<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> minRun <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">insertionSort</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> i<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Combinamos los bloques utilizando el algoritmo de mezcla</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> size <span class="token operator">=</span> minRun<span class="token punctuation">;</span> size <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> left <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> left <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">merge</span><span class="token punctuation">(</span>lista<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//-------------------Metodos Auxiliares--------------------------//</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Creamos el arreglo de conteos</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> val <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> digitVal <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> digit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            counts<span class="token punctuation">[</span>digitVal<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Calculamos las posiciones iniciales de cada valor</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> counts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> counts<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Creamos el arreglo ordenado</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> sortedArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">T</span> val <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> digitVal <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> digit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> counts<span class="token punctuation">[</span>digitVal<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            sortedArr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            counts<span class="token punctuation">[</span>digitVal<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Copiamos el arreglo ordenado al arreglo original</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sortedArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">int</span> <span class="token function">getDigit</span><span class="token punctuation">(</span><span class="token class-name">T</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> strVal <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">&gt;=</span> strVal<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">char</span> digitChar <span class="token operator">=</span> strVal<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>strVal<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> digit<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span>digitChar<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> largest <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>largest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            largest <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>largest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            largest <span class="token operator">=</span> right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> pivotIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivotIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">T</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> left<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>pivot<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arr<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> leftArr<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> rightArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> leftArr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> rightArr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>leftArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>rightArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">,</span> leftArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">,</span> rightArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> leftArr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">,</span> leftArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> rightArr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">,</span> rightArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">int</span> <span class="token function">getNextGap</span><span class="token punctuation">(</span><span class="token keyword">int</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        gap <span class="token operator">=</span> <span class="token punctuation">(</span>gap <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>gap <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> gap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">int</span> <span class="token function">minRunLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> minMerge<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> minMerge<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            r <span class="token operator">|=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> n <span class="token operator">+</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">T</span> key <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> left <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len1 <span class="token operator">=</span> mid <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len2 <span class="token operator">=</span> right <span class="token operator">-</span> mid<span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> leftArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> rightArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Copiamos los elementos a arreglos temporales</span>
        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
		<span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempLeft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
		<span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempRight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tempLeft<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> leftArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tempRight<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rightArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span>

        <span class="token comment">// Combinamos los arreglos temporales en el arreglo original</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempLeft<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>tempRight<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">,</span> tempLeft<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">,</span> tempRight<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Combinamos los elementos restantes del arreglo izquierdo</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">,</span> tempLeft<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Combinamos los elementos restantes del arreglo derecho</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">,</span> tempRight<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clases-utilizadas-importaciones" tabindex="-1"><a class="header-anchor" href="#clases-utilizadas-importaciones" aria-hidden="true">#</a> Clases utilizadas (Importaciones)</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45);function v(b,g){const s=l("router-link");return i(),u("div",null,[k,n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#algoritmos-implementados"},{default:t(()=>[p("Algoritmos implementados")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#bubble-sort"},{default:t(()=>[p("Bubble Sort")]),_:1})]),n("li",null,[a(s,{to:"#insertion-sort"},{default:t(()=>[p("Insertion Sort")]),_:1})]),n("li",null,[a(s,{to:"#bucket-sort"},{default:t(()=>[p("Bucket Sort")]),_:1})]),n("li",null,[a(s,{to:"#selection-sort"},{default:t(()=>[p("Selection Sort")]),_:1})]),n("li",null,[a(s,{to:"#merge-sort"},{default:t(()=>[p("Merge Sort")]),_:1})]),n("li",null,[a(s,{to:"#quick-sort"},{default:t(()=>[p("Quick Sort")]),_:1})]),n("li",null,[a(s,{to:"#heap-sort"},{default:t(()=>[p("Heap Sort")]),_:1})]),n("li",null,[a(s,{to:"#radix-sort"},{default:t(()=>[p("Radix Sort")]),_:1})]),n("li",null,[a(s,{to:"#shell-sort"},{default:t(()=>[p("Shell Sort")]),_:1})]),n("li",null,[a(s,{to:"#cocktail-sort"},{default:t(()=>[p("Cocktail Sort")]),_:1})]),n("li",null,[a(s,{to:"#comb-sort"},{default:t(()=>[p("Comb Sort")]),_:1})]),n("li",null,[a(s,{to:"#gnome-sort"},{default:t(()=>[p("Gnome Sort")]),_:1})]),n("li",null,[a(s,{to:"#tim-sort-nativo"},{default:t(()=>[p("Tim Sort Nativo")]),_:1})]),n("li",null,[a(s,{to:"#tim-sort"},{default:t(()=>[p("Tim Sort")]),_:1})]),n("li",null,[a(s,{to:"#odd-even-sort"},{default:t(()=>[p("Odd Even Sort")]),_:1})])])]),n("li",null,[a(s,{to:"#pruebas-de-algoritmos"},{default:t(()=>[p("Pruebas de algoritmos")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#codigo-fuente-pruebas"},{default:t(()=>[p("Código Fuente Pruebas")]),_:1})]),n("li",null,[a(s,{to:"#clases-utilizadas-pruebas-importaciones"},{default:t(()=>[p("Clases Utilizadas Pruebas (Importaciones)")]),_:1})])])]),n("li",null,[a(s,{to:"#codigo-fuente"},{default:t(()=>[p("Código Fuente")]),_:1})]),n("li",null,[a(s,{to:"#clases-utilizadas-importaciones"},{default:t(()=>[p("Clases utilizadas (Importaciones)")]),_:1})])])]),m])}const w=c(r,[["render",v],["__file","Ordenamiento.html.vue"]]);export{w as default};
